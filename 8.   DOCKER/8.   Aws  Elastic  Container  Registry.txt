
8. AWS ELASTIC CONTAINER REGISTRY :
=====================================
1. What is Amazon ECR?
-----------------------
. Amazon Elastic Container Registry (Amazon ECR) is an Amazon Web Service (AWS) product that stores, 
  manages and deploys Docker images,which are managed clusters of Amazon EC2 instances.

. Amazon ECR provides a command-line interface (CLI) and APIs to manage repositories and integrated services, 
  such as Amazon Elastic Container Service (Amazon ECS), which installs and manages the infrastructure for these containers.
  The primary difference between Amazon ECR and ECS is that while ECR provides the repository that stores all code that has been 
  written and packaged as a Docker image, the ECS takes these files and actively uses them in the deployment of applications.

. A developer can use the Docker command line interface to push or pull container images to or from an AWS region. 
  Amazon ECR can be used wherever a Docker container service is running, including on-premises environments


2. How Amazon ECR works
-------------------------

1. Amazon Elastic Container Registry writes and packages code in the form of a Docker image.
2. Next, it compresses, encrypts and manages access to the images -- including all tags and versions 
   -- and controls image lifecycles.
3. Finally, the Amazon ECS pulls the necessary Docker images from the ECR to be used in the deployment 
   of apps and continues to manage containers everywhere -- including Amazon Elastic Kubernetes Service (Amazon EKS), 
   AWS cloud and on premise networks.


3. Amazon ECR includes:
---------------------------
1. Docker images        : This is the file that is used to execute code within a Docker container.
2. Repository           : The Docker images are stored in the Amazon ECR repository. Developers can push and pull images to the repository.
3. Repository policy    : Developers can use these policies to manage access to the repositories and the images within them.
4. Registry             : All AWS accounts receive access to Amazon ECR that allows them to create repositories and store images in them.
5. Authorization token  : Before it can push and pull images, the Docker client must be recognized as an AWS account holder.



4. Create a ECR Registry:
--------------------------
1. Assuming you’ve already got an AWS account and permissions correctly configured, the easiest way to get started is to 
   create a new ECR repository via the Amazon Web Services UI.
2. Go to the ECR homepage and click the Get Started button.
3. You will be taken to the Create repository page, where you can enter all the details for your new repository.

Choose a visibility (Public or Private), name the repository (ideally something short but self-explanatory), and 
below the name, select any of the other options you need:

Tag immutability   - Prevents the same tag from being pushed twice and overwriting a previous version of the tag.
Scan on push       - Your images will be scanned for security vulnerabilities each time a new tag is pushed.
KMS encryption     - Allows you to use AWS Key Management Service (KMS) to encrypt the images in this repository.


Note: your final repository URL structure will be something like this:


## <account-id>.dkr.ecr.<account-region>.amazonaws.com/<repository-name>



5. Pushing an Image to the Repository:
---------------------------------------
. Before publishing the Image to ECR, make sure you have Docker installed on your workstation and a project with a Dockerfile 
  that’s ready to be built and pushed to ECR.
. Next, set up your AWS credentials on the CLI if you haven’t already:

# aws configure

. Paste your AWS Access Key ID and AWS Secret Access Key. This will allow your CLI instance access to your AWS account.


. Adding Your ECR Credentials to the Docker CLI

# aws ecr get-login-password --region <account-region> docker login --username AWS --password-stdin 
  <account-id>.dkr.ecr.<account-region>.amazonaws.com/<repository-name>
  

. Next, build the image from your ‘Dockerfile’:

# docker build -t <image-name>:<image-version> .

. Then, tag the image with your ECR repository name:

# docker tag <image-name>:<image-version> <account-id>.dkr.ecr.
  <account-region>.amazonaws.com/<repository-name>:<image-version>
  
. Your image is now ready to push to ECR:

# docker push <account-id>.dkr.ecr.<account-region>.amazonaws.com
<repository-name>:<image-version>

.  And just like that, you have pushed our first image to a repository on Elastic Container Registry. 
   In the next section, you’ll see how you can use these images for local or remote deployments.

Pulling a Image From ECR:
---------------------------
. Whether you want to pull an image from a public ECR repository or your company has private images stored in ECR, pulling works in the same way it does in any container registry. After you’ve authenticated (using the same steps above), you can use docker pull:

# docker pull <account-id>.dkr.ecr.<account-region>.amazonaws.com <repository-name>:<image-version>