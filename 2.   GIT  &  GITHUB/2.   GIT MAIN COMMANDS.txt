GIT COMMANDS:
==============

1. Git Environment Setup :
==========================
1.1 Installation of Git Client:
--------------------------------
# yum -y install git-core
# git --version

1.2.Customize Git Environment:
-------------------------------
- Git stores all global configurations in .gitconfig file.

# git config --global user.name "Jerry Mouse"                 -->Set UserName.
# git config --global user.email "jerry@tutorialspoint.com"   -->Set Email Address.
# git config --global branch.autosetuprebase always           -->Set branch for merge conflicts.
# git config --global core.editor vim                         -->Set Vim Editor.
# git config --global merge.tool vimdiff                      -->Set VimDiff Tool.
# git config --list                                           -->List all git Config.

******************************************************************************************************************************************

2. Git Create Operation:
=========================

2.1.Server Side Configuration:
--------------------------------
1. Create New User
-------------------

# groupadd dev
# useradd -G devs -d /home/gituser -m -s /bin/bash gituser
# passwd gituser

2. Create a Bare Repository:
--------------------------------
# pwd
/home/gituser

# mkdir project.git
# cd project.git/
# ls

# git --bare init
Initialized empty Git repository in /home/gituser-m/project.git/

# ls
branches config description HEAD hooks info objects refs


2.2.Client Side Configuration:
-------------------------------
1. Generate Public/Private RSA Key Pair:
-------------------------------------------
# pwd
/home/tom

# ssh-keygen


2. Adding Keys to authorized_keys:
------------------------------------
# pwd
/home/tom

# ssh-copy-id -i ~/.ssh/id_rsa.pub gituser@git.server.com

******************************************************************************************************************************************

3. Git Stages:
===============

Git Work Flow:
--------------------
Let us see the basic workflow of Git.

Step 1 − You modify a file from the working directory.
Step 2 − You add these files to the staging area.
Step 3 − You perform commit operation that moves the files from the staging area.
.After push operation, it stores the changes permanently to the Git repository.



3.1. Working Directory:
-------------------------
. The working directory is the place where files are checked out.

# touch file1 file2 file 3

# git status



3.2. Staging Area:
-------------------
. Only those files present in the staging area are considered for commit and not all the modified files.

# git add file1 file2
# git add .



3.3. Local Repository:
-----------------------
. Every VCS tool provides a private workplace as a working copy. 
. Developers make changes in their private workplace and after commit, these changes become a part of the repository.

# git commit –m “First Commit”

# git log 


3.4. Push to GitHub Repository:
--------------------------------

# git remote add origin gituser@git.server.com:project.git
# git push origin master

*****************************************************************************************************************************************************************************

4. Git Clone:
===============
. The Clone operation creates an instance of the remote repository to a other Developer local desktop.

# mkdir jerry_repo
# cd jerry_repo/
# git clone gituser@git.server.com:project.git

# cd project/
# ls

*********************************************************************************************************************************************************************

5. Git Perform Changes:
========================
. Delevoper Clones repo from github and added some extra code.

# touch newtext

# git status -s
# git add newtext
# git status -s
# git commit -m 'Implemented my_strlen function'
# git log
# git show <commitid>

**********************************************************************************************************************************************

6. Git - Review Changes:
=========================
. Developer realizes that he wants to make a changes in code.
. Delevoper uses the git log command to view log details.

# git log                                              ---->>To Check the Commits.
# git show cbe1249b140dad24b2c35b15cc7e26a6f02d2277    ---->>To show code in a Git.
# git diff                                             ---->>To Check Cganges in code.

**********************************************************************************************************************************************

7. Commit Changes:
===================
# git log
# git status -s
# git add string.c
# git status -s
# git commit --amend -m 'Change commit'
# git log

******************************************************************************************************************************************

8. Push Operation:
===================
# git log
# git show d1e19d316224cddc437e3ed34ec3c931ad803958
# git push origin master

******************************************************************************************************************************************

9. Git - Update Operation:
===========================
9.1. Modify Existing Function:
-------------------------------
Developer-1 clones a code from git repo. he finds out new file addes to the code. He wants to know who added this files. 

# git clone gituser@git.server.com:project.git
# git log
# git show commitid
# git diff

Developer-1 finds out a that the above changes is made by Developer-2 and he finds that some bugs in his code so he open file and changes.

# git diff
# git add .
# git log
# git push origin master

Add New Function:
-----------------
. Developer-2 decides to make a new code and after compile and check the tried to push the code to git repo.

# toudh newfile-latest

#  git status -s
#  git add string.c
#  git commit -m "Added my_strcpy function"
#  git log
#  git push origin master

Developer2 faces Below Error:
.....................................................................................
To gituser@git.server.com:project.git
! [rejected]
master −> master (non-fast-forward)
error: failed to push some refs to 'gituser@git.server.com:project.git'
To prevent you from losing history, non-fast-forward updates were rejected
Merge the remote changes before pushing again. See the 'Note about
fast-forwards' section of 'git push --help' for details.
...................................................................................

Resolution:
------------
. Fetch Latest Changes

#  git pull
#  git push origin master

******************************************************************************************************************************************

10. Git Stash:
================
*******************************************************************************************************************************
11. Git Delete Files:
======================

*************************************************************************************************************************************************************

12. Git - Tag Operation:
========================

1. Create Tags:
---------------
. Let us tag the current HEAD by using the git tag command. 
. Tom provides a tag name with -a option and provides a tag message with –m option.

# pwd
/home/tom/top_repo/project

# git tag -a 'Release_1_0' -m 'Tagged basic string operation code' HEAD

# git push origin tag Release_1_0


2.View Tags:
-------------
# git pull
# git tag -l
# git show Release_1_0

3. Delete Tags:
----------------
# git tag
# git tag -d Release_1_0
# git push origin :Release_1_0

*******************************************************************************************************************************************






