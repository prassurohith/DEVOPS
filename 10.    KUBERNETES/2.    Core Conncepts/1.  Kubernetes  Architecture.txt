
2. Kubernetes Architecture:
=============================

1. Kubernetes Architecture Definition:
========================================
- Kubernetes is an open source container deployment and management platform. 
- It offers container orchestration, a container runtime, container-centric infrastructure orchestration, load balancing, self-healing mechanisms, 
  and service discovery.
- Kubernetes architecture, also sometimes called Kubernetes application deployment architecture or Kubernetes client server architecture, 
  is used to compose, scale, deploy, and manage application containers across host clusters.



---------------------------------------------------------------------------------------------------------------------------------------------------------

2. What is Kubernetes Architecture?
====================================
- A Kubernetes cluster is a form of Kubernetes deployment architecture. 
- Basic Kubernetes architecture exists in two parts:
 1. Kubernetes Master Nodes.
 2. Kubernetes Worker Nodes. 
- Each node could be either a physical or virtual machine and is its own Linux environment. 
- Every node also runs pods, which are composed of containers.


2.1. Kubernetes MasterNode Components:
========================================
- The control plane is the nerve center that houses Kubernetes cluster architecture components that control the cluster. 
- It also maintains a data record of the configuration and state of all of the cluster’s Kubernetes objects.
- The Kubernetes control plane is in constant contact with the compute machines to ensure that the cluster runs as configured. 


1. Kubernetes API Server:
---------------------------
- The front end of the Kubernetes control plane, 
- The API Server supports updates, scaling, and other kinds of lifecycle orchestration by providing  APIs for various types of applications. 
- Clients must be able to access the API server from outside the cluster, because it serves as the gateway, supporting lifecycle orchestration at each stage. 
- In that role, clients use the API server as a tunnel to pods, services, and nodes, and authenticate via the API server.


2. Kubernetes Scheduler:
-------------------------
- The Kubernetes scheduler stores the resource usage data for each compute node; determines whether a cluster is healthy; 
  and determines whether new containers should be deployed, and if so, where they should be placed. 
- The scheduler considers the health of the cluster generally alongside the pod’s resource demands, such as CPU or memory. 
- Then it selects an appropriate compute node and schedules the task, pod, or service, taking resource limitations or guarantees, 
  data locality, the quality of the service requirements, anti-affinity and affinity specifications, and other factors into account
  
3. Kubernetes Controller Manager:
------------------------------------
- There are various controllers in a Kubernetes ecosystem that drive the states of endpoints (pods and services), tokens and 
  service accounts (namespaces), nodes, and replication (autoscaling). 
- The controller manager—sometimes called cloud controller manager or simply controller—is a daemon which runs the Kubernetes 
  cluster using several controller functions.
- The controller watches the objects it manages in the cluster as it runs the Kubernetes core control loops. 
- It observes them for their desired state and current state via the API server. 
- If the current and desired states of the managed objects don’t match, the controller takes corrective steps to drive object 
  status toward the desired state. The Kubernetes controller also performs core lifecycle functions.



4. ETCD:
-----------
- Distributed and fault-tolerant, etcd is an open source, key-value store database that stores configuration data and information about 
  the state of the cluster. etcd may be configured externally, although it is often part of the Kubernetes control plane.
- etcd stores the cluster state based on the Raft consensus algorithm. This helps cope with a common problem that arises in the context 
  of replicated state machines and involves multiple servers agreeing on values. Raft defines three different roles: leader, candidate,
  and follower, and achieves consensus by electing a leader.
- In this way, etcd acts as the single source of truth (SSOT) for all Kubernetes cluster components, responding to queries from the 
  control plane and retrieving various parameters of the state of the containers, nodes, and pods. etcd is also used to store 
  configuration details such as ConfigMaps, subnets, and Secrets, along with cluster state data.




2.2. Kubernetes WorkerNode Components:
======================================
- Managed by the control plane, cluster nodes are machines that run containers. 
- Each node runs an agent for communicating with the control plane, the kubelet—the primary Kubernetes controller. 
- Each node also runs a container runtime engine, such as Docker or rkt. 
- The node also runs additional components for monitoring, logging, service discovery, and optional extras.


1. Worker Nodes:
--------------------
- A Kubernetes cluster must have at least one compute node, although it may have many, depending on the need for capacity. 
- Pods orchestrated and scheduled to run on nodes, so more nodes are needed to scale up cluster capacity.
- Nodes do the work for a Kubernetes cluster. They connect applications and networking, compute, and storage resources.
- Nodes may be cloud-native virtual machines (VMs) or bare metal servers in data centers.



2. Container Runtime Engine:
-----------------------------
- Each compute node runs and manages container life cycles using a container runtime engine. 
- Kubernetes supports Open Container Initiative-compliant runtimes such as Docker, CRI-O, and rkt.


3. Kubelet service:
-------------------
- Each compute node includes a kubelet, an agent that communicates with the control plane to ensure the containers in a pod are running. 
- When the control plane requires a specific action happen in a node, the kubelet receives the pod specifications through the API server
  and executes the action. It then ensures the associated containers are healthy and running.

4. Kube-proxy service:
-----------------------
- Each compute node contains a network proxy called a kube-proxy that facilitates Kubernetes networking services. 
- The kube-proxy either forwards traffic itself or relies on the packet filtering layer of the operating system 
  to handle network communications both outside and inside the cluster.
- The kube-proxy runs on each node to ensure that services are available to external parties and deal with individual host subnetting. 
  It serves as a network proxy and service load balancer on its node, managing the network routing for UDP and TCP packets. 
- In fact, the kube-proxy routes traffic for all service endpoints.

